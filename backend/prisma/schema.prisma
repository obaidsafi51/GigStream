// GigStream Database Schema
// PostgreSQL 16.10 + Neon.tech + Prisma ORM
// Optimized for Cloudflare Workers with @prisma/client/edge

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 1. WORKERS TABLE
// ============================================
model Worker {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password_hash    String
  wallet_id        String?  @unique // Circle wallet ID
  wallet_address   String?  @unique // Blockchain address
  reputation_score Int      @default(500) // Base score: 500, range: 0-1000
  account_age_days Int      @default(0)
  completion_rate  Decimal  @default(0) @db.Decimal(5, 2) // Percentage 0-100
  total_tasks      Int      @default(0)
  total_earned     Decimal  @default(0) @db.Decimal(18, 6) // USDC amount
  average_rating   Decimal  @default(0) @db.Decimal(3, 2) // 0-5 stars
  dispute_rate     Decimal  @default(0) @db.Decimal(5, 2) // Percentage
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  last_active_at   DateTime @default(now())

  // Relations
  tasks             Task[]
  transactions      Transaction[]
  reputation_events ReputationEvent[]
  loans             Loan[]
  audit_logs        AuditLog[]       @relation("ActorLogs")

  @@index([email])
  @@index([wallet_address])
  @@index([reputation_score])
  @@index([created_at])
  @@map("workers")
}

// ============================================
// 2. PLATFORMS TABLE
// ============================================
model Platform {
  id               String   @id @default(cuid())
  name             String
  api_key          String   @unique
  api_key_hash     String // Hashed version for security
  webhook_url      String?
  webhook_secret   String?
  contact_email    String
  wallet_address   String?  @unique
  total_payouts    Decimal  @default(0) @db.Decimal(18, 6)
  total_tasks      Int      @default(0)
  active_workers   Int      @default(0)
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  tasks Task[]

  @@index([api_key])
  @@index([created_at])
  @@map("platforms")
}

// ============================================
// 3. TASKS TABLE
// ============================================
model Task {
  id                String    @id @default(cuid())
  platform_id       String
  worker_id         String
  task_type         String // "fixed" | "streaming"
  amount            Decimal   @db.Decimal(18, 6) // USDC amount
  status            String    @default("pending") // "pending" | "active" | "completed" | "cancelled" | "disputed"
  title             String?
  description       String?
  metadata          Json? // Platform-specific data
  verification_data Json? // Photos, GPS, etc.
  completion_proof  String? // IPFS hash or URL
  scheduled_at      DateTime?
  started_at        DateTime?
  completed_at      DateTime?
  cancelled_at      DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  platform     Platform      @relation(fields: [platform_id], references: [id], onDelete: Cascade)
  worker       Worker        @relation(fields: [worker_id], references: [id], onDelete: Cascade)
  streams      Stream[]
  transactions Transaction[]

  @@index([platform_id])
  @@index([worker_id])
  @@index([status])
  @@index([created_at])
  @@index([completed_at])
  @@map("tasks")
}

// ============================================
// 4. STREAMS TABLE
// ============================================
model Stream {
  id                 String    @id @default(cuid())
  task_id            String
  contract_address   String? // Smart contract address
  start_time         DateTime
  end_time           DateTime
  total_amount       Decimal   @db.Decimal(18, 6)
  released_amount    Decimal   @default(0) @db.Decimal(18, 6)
  remaining_amount   Decimal   @db.Decimal(18, 6)
  release_interval   Int // Seconds between releases
  next_release_at    DateTime?
  status             String    @default("active") // "active" | "paused" | "completed" | "cancelled"
  paused_at          DateTime?
  cancelled_at       DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relations
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@index([task_id])
  @@index([status])
  @@index([next_release_at])
  @@map("streams")
}

// ============================================
// 5. TRANSACTIONS TABLE
// ============================================
model Transaction {
  id              String    @id @default(cuid())
  worker_id       String
  task_id         String?
  tx_hash         String?   @unique // Blockchain transaction hash
  tx_type         String // "payout" | "advance" | "repayment" | "fee"
  amount          Decimal   @db.Decimal(18, 6) // USDC amount
  fee             Decimal   @default(0) @db.Decimal(18, 6)
  status          String    @default("pending") // "pending" | "processing" | "completed" | "failed"
  from_address    String?
  to_address      String?
  circle_tx_id    String?   @unique // Circle API transaction ID
  blockchain_confirmations Int @default(0)
  error_message   String?
  metadata        Json?
  processed_at    DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relations
  worker Worker @relation(fields: [worker_id], references: [id], onDelete: Cascade)
  task   Task?  @relation(fields: [task_id], references: [id], onDelete: SetNull)

  @@index([worker_id])
  @@index([task_id])
  @@index([tx_type])
  @@index([status])
  @@index([created_at])
  @@index([tx_hash])
  @@map("transactions")
}

// ============================================
// 6. REPUTATION_EVENTS TABLE
// ============================================
model ReputationEvent {
  id          String   @id @default(cuid())
  worker_id   String
  event_type  String // "task_completed" | "dispute_resolved" | "dispute_filed" | "rating_received" | "bonus" | "penalty"
  delta       Int // Change in reputation score (positive or negative)
  reason      String
  related_id  String? // Task ID, transaction ID, etc.
  metadata    Json?
  created_at  DateTime @default(now())

  // Relations
  worker Worker @relation(fields: [worker_id], references: [id], onDelete: Cascade)

  @@index([worker_id])
  @@index([event_type])
  @@index([created_at])
  @@map("reputation_events")
}

// ============================================
// 7. LOANS TABLE
// ============================================
model Loan {
  id                String    @id @default(cuid())
  worker_id         String
  amount            Decimal   @db.Decimal(18, 6) // Principal amount
  fee               Decimal   @db.Decimal(18, 6) // Interest/fee
  total_due         Decimal   @db.Decimal(18, 6) // amount + fee
  amount_repaid     Decimal   @default(0) @db.Decimal(18, 6)
  status            String    @default("pending") // "pending" | "approved" | "disbursed" | "repaying" | "repaid" | "defaulted"
  risk_score        Int // Risk score at time of approval
  predicted_earnings Decimal  @db.Decimal(18, 6)
  contract_address  String? // Smart contract address
  disbursed_at      DateTime?
  repayment_due     DateTime
  repaid_at         DateTime?
  defaulted_at      DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  worker Worker @relation(fields: [worker_id], references: [id], onDelete: Cascade)

  @@index([worker_id])
  @@index([status])
  @@index([repayment_due])
  @@index([created_at])
  @@map("loans")
}

// ============================================
// 8. AUDIT_LOGS TABLE
// ============================================
model AuditLog {
  id         String   @id @default(cuid())
  actor_id   String // Worker ID, Platform ID, or "system"
  actor_type String // "worker" | "platform" | "system"
  action     String // "create_task" | "complete_task" | "approve_loan" | etc.
  resource_type String // "task" | "loan" | "transaction" | etc.
  resource_id String?
  metadata   Json? // Additional context
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())

  // Relations
  actor Worker? @relation("ActorLogs", fields: [actor_id], references: [id], onDelete: SetNull)

  @@index([actor_id])
  @@index([action])
  @@index([resource_type])
  @@index([created_at])
  @@map("audit_logs")
}
